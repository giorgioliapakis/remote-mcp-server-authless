# Project Structure

This document outlines the structure and organization of the remote MCP (Model Context Protocol) server project.

## Directory Structure

```
remote-mcp-server-authless/
├── src/
│   ├── index.ts              # Main MCP agent class and Cloudflare Worker entry point
│   └── tools/
│       ├── index.ts          # Central tool registry and exports
│       ├── sql-utils.ts      # Shared SQL utilities and BigQuery helpers
│       ├── add.ts            # Simple addition tool (demo)
│       ├── calculator.ts     # Multi-operation calculator tool (demo)
│       ├── campaign-analysis.ts    # Campaign performance deep-dive analysis
│       ├── creative-analysis.ts    # Meta creative performance and concept analysis
│       ├── get-performance.ts      # Flexible SQL query tool (fallback)
│       ├── regional-comparison.ts  # Country/platform performance comparisons
│       └── weekly-report.ts        # Business intelligence overview reports
├── package.json              # Dependencies and scripts
├── tsconfig.json             # TypeScript configuration
├── wrangler.jsonc            # Cloudflare Worker configuration
└── biome.json               # Code formatting and linting rules
```

## File Organization Guidelines

### Main Entry Point (`src/index.ts`)
- Contains the main `MyMCP` class extending `McpAgent`
- Handles Cloudflare Worker routing (`/sse`, `/mcp` endpoints)
- Keeps tool registration logic minimal - delegates to tools module
- Should remain focused on server setup and request routing

### Tools Module (`src/tools/`)
This directory follows a modular architecture where each tool is isolated:

#### Tool File Structure
- **Each tool gets its own file** (e.g., `campaign-analysis.ts`, `weekly-report.ts`)
- **One tool per file** - maintains clear separation of concerns
- **Consistent naming**: Use descriptive names that match the tool's purpose
- **Domain grouping**: Analytics tools share common patterns and utilities

#### Individual Tool Files
Each tool file should:
- Export a single registration function (e.g., `registerCampaignAnalysisTool`)
- Import required dependencies (`McpServer`, `z` for schemas)
- Import shared utilities from `sql-utils.ts` for BigQuery operations
- Include JSDoc comments describing the tool's purpose
- Handle all tool-specific logic and error cases
- Use safe SQL parameter handling from utilities

#### Shared Utilities (`src/tools/sql-utils.ts`)
- **SQL safety functions**: Parameter escaping, LIKE clause building, date filtering
- **BigQuery helpers**: Standard calculations (CPA, CTR, CVR), performance ratings
- **Security utilities**: Input validation specifically for SQL queries
- **Common patterns**: Reusable SQL generation functions
- **Constants**: Authorized table references and shared configurations

#### Tools Index (`src/tools/index.ts`)
- **Central registry**: Re-exports all individual tool registration functions
- **Convenience function**: Provides `registerAllTools()` for bulk registration
- **Single source of truth**: Import tools from this file, not individual tool files

### Current Tool Categories

#### Demo Tools
- `add.ts` - Simple addition for testing
- `calculator.ts` - Multi-operation calculator

#### Analytics Tools
- `weekly-report.ts` - Business intelligence overviews and platform summaries
- `campaign-analysis.ts` - Specific campaign deep dives with performance comparisons
- `creative-analysis.ts` - Meta creative performance and concept analysis
- `regional-comparison.ts` - Country and platform performance breakdowns
- `get-performance.ts` - Flexible BigQuery tool for custom analysis (fallback)

### Adding New Tools

#### For Analytics Tools:

1. **Create tool file**: `src/tools/your-analytics-tool.ts`
   ```typescript
   import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
   import { z } from "zod";
   import { 
     BLENDED_SUMMARY_TABLE, 
     buildDateFilter, 
     createCampaignMatchConditions 
   } from "./sql-utils";

   export function registerYourAnalyticsTool(server: McpServer) {
     server.tool("your-analytics-tool", schema, handler);
   }
   ```

2. **Use shared utilities**: Import SQL helpers from `sql-utils.ts` for safe query building
3. **Follow security patterns**: Use parameterized queries and avoid string interpolation
4. **Update index**: Add exports to `src/tools/index.ts`

#### For General Tools:

1. **Create tool file**: `src/tools/your-tool.ts`
   ```typescript
   import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
   import { z } from "zod";

   export function registerYourTool(server: McpServer) {
     server.tool("your-tool", schema, handler);
   }
   ```

2. **Update index**: Add exports to `src/tools/index.ts`
3. **Tool registration**: Tools are automatically registered via `registerAllTools()`

## Architecture Principles

### Modularity
- Each tool is completely isolated in its own file
- Shared functionality extracted to utilities module
- No cross-dependencies between tools
- Easy to add, remove, or modify individual tools

### Security First
- All SQL queries use parameterized approaches
- Shared validation functions prevent injection attacks
- Input sanitization at the utility level
- Principle of least privilege for data access

### Scalability
- New tools require minimal changes to existing code
- Clear patterns for tool development
- Centralized registration system
- Shared utilities prevent code duplication

### Maintainability
- Single responsibility principle for each file
- Consistent structure across all tools
- Clear import/export patterns
- Domain-specific utility functions

### Type Safety
- All tools use Zod schemas for input validation
- TypeScript types throughout the codebase
- Proper error handling and type checking
- Shared type definitions in utilities

## Usage Patterns

### Registering All Tools
```typescript
import { registerAllTools } from "./tools";
registerAllTools(server);
```

### Registering Specific Tools
```typescript
import { registerWeeklyReportTool, registerCampaignAnalysisTool } from "./tools";
registerWeeklyReportTool(server);
registerCampaignAnalysisTool(server);
```

### Using SQL Utilities
```typescript
import { 
  BLENDED_SUMMARY_TABLE,
  buildDateFilter,
  createCampaignMatchConditions,
  safeCpaCalculation 
} from "./sql-utils";

// Safe date filtering
const dateCondition = buildDateFilter(7); // Last 7 days

// Safe campaign matching
const campaignCondition = createCampaignMatchConditions(['Growth', 'Earn']);

// Safe CPA calculation
const cpaColumn = safeCpaCalculation();
```

## Security Guidelines

### SQL Query Construction
- **NEVER** use string interpolation for user input
- **ALWAYS** use utility functions from `sql-utils.ts`
- **VALIDATE** all inputs before query construction
- **LIMIT** query results to prevent resource exhaustion

### Input Validation
- Use `validateAndCleanSqlQuery()` for SQL queries
- Use `validateAndCleanInput()` for general parameters
- Implement schema validation with Zod
- Handle validation errors gracefully

This structure ensures the codebase remains organized, secure, and easy to maintain as the number of tools grows, with special attention to the analytics domain requirements.
description:
globs:
alwaysApply: false
---
